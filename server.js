// Beautiful Railway Service —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è —Å–æ—Ü.—Å–µ—Ç–µ–π + –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–ê–ß–ï–°–¢–í–û + STREAMING
// server.js - –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å—Ç–∏–ª–µ–π TikTok/Instagram + NO COMPRESSION + NO TIMEOUT

const express = require('express');
const multer = require('multer');
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è Railway
app.use((req, res, next) => {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 15 –º–∏–Ω—É—Ç
  req.setTimeout(900000); // 15 –º–∏–Ω—É—Ç
  res.setTimeout(900000); // 15 –º–∏–Ω—É—Ç
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
  res.setHeader('X-Accel-Buffering', 'no');
  
  next();
});

// Middleware
app.use(express.json({ limit: '500mb' }));
app.use(express.urlencoded({ extended: true, limit: '500mb' }));

// CORS
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

const upload = multer({
  storage: multer.memoryStorage(),
  limits: { 
    fileSize: 500 * 1024 * 1024,
    fieldSize: 50 * 1024 * 1024
  }
});

// üé® –ì–û–¢–û–í–´–ï –°–¢–ò–õ–ò –î–õ–Ø –°–û–¶–ò–ê–õ–¨–ù–´–• –°–ï–¢–ï–ô (–ö–û–ú–ü–ê–ö–¢–ù–´–ï –†–ê–ó–ú–ï–†–´ + –£–ú–ù–´–ï FALLBACK –®–†–ò–§–¢–´)
const SUBTITLE_STYLES = {
  // TikTok —Å—Ç–∏–ª–∏  
  tiktok_classic: {
    fontsize: 8,  // 16/2 = 8
    fontcolor: 'white',
    fontname: 'DejaVu Sans',
    fontnames: ['Ubuntu', 'Liberation Sans', 'DejaVu Sans'],
    outline: 2,   // –£–º–µ–Ω—å—à–∏–ª–∏ –æ–±–≤–æ–¥–∫—É
    shadow: 1,    // –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–µ–Ω—å
    bold: 1,
    alignment: 2,
    marginv: 15,  // –£–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø
    backcolour: '&H80000000',
    name: 'TikTok Classic',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π TikTok - –±–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º'
  },
  
  tiktok_neon: {
    fontsize: 9,  // 18/2 = 9
    fontcolor: '00ffff',
    fontname: 'Liberation Sans',
    fontnames: ['Roboto', 'Liberation Sans', 'Noto Sans'],
    outline: 2,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 13,  // 25/2 ‚âà 13
    name: 'TikTok Neon',
    description: '–ù–µ–æ–Ω–æ–≤—ã–π TikTok —Å—Ç–∏–ª—å - —è—Ä–∫–∏–π –≥–æ–ª—É–±–æ–π —Å —Å–∏–ª—å–Ω–æ–π –æ–±–≤–æ–¥–∫–æ–π'
  },
  
  tiktok_yellow: {
    fontsize: 9,  // 17/2 ‚âà 9
    fontcolor: 'ffff00',
    fontname: 'Ubuntu',
    fontnames: ['Ubuntu', 'Open Sans', 'DejaVu Sans'],
    outline: 2,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 15,
    name: 'TikTok Yellow',
    description: '–ñ–µ–ª—Ç—ã–π TikTok —Å—Ç–∏–ª—å - –∫–∞–∫ —É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤'
  },
  
  // Instagram —Å—Ç–∏–ª–∏
  instagram_clean: {
    fontsize: 8,  // 15/2 ‚âà 8
    fontcolor: 'ffffff',
    fontname: 'Noto Sans',
    fontnames: ['Noto Sans', 'Open Sans', 'Liberation Sans'],
    outline: 1,
    shadow: 1,
    alignment: 2,
    marginv: 18,  // 35/2 ‚âà 18
    backcolour: '&H40000000',
    name: 'Instagram Clean',
    description: '–ß–∏—Å—Ç—ã–π Instagram —Å—Ç–∏–ª—å - —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç'
  },
  
  instagram_story: {
    fontsize: 7,  // 14/2 = 7
    fontcolor: 'ffffff',
    fontname: 'Roboto',
    fontnames: ['Roboto', 'Noto Sans', 'DejaVu Sans'],
    outline: 1,
    shadow: 1,
    alignment: 2,
    marginv: 20,  // 40/2 = 20
    name: 'Instagram Story',
    description: '–°—Ç–∏–ª—å Instagram Stories - —Ç–æ–Ω–∫–∏–π –∏ –∏–∑—è—â–Ω—ã–π'
  },
  
  instagram_reel: {
    fontsize: 8,  // 16/2 = 8
    fontcolor: 'ffffff',
    fontname: 'Open Sans',
    fontnames: ['Open Sans', 'Liberation Sans', 'DejaVu Sans'],
    outline: 2,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 15,
    backcolour: '&H60000000',
    name: 'Instagram Reel',
    description: '–°—Ç–∏–ª—å Instagram Reels - –∂–∏—Ä–Ω—ã–π –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π'
  },
  
  // YouTube —Å—Ç–∏–ª–∏
  youtube_classic: {
    fontsize: 7,  // 14/2 = 7
    fontcolor: 'ffffff',
    fontname: 'Liberation Sans',
    fontnames: ['Source Sans Pro', 'Liberation Sans', 'Noto Sans'],
    outline: 1,
    shadow: 1,
    alignment: 2,
    marginv: 13,  // 25/2 ‚âà 13
    name: 'YouTube Classic',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π YouTube - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã'
  },
  
  youtube_gaming: {
    fontsize: 8,  // 15/2 ‚âà 8
    fontcolor: '00ff00',
    fontname: 'DejaVu Sans',
    fontnames: ['Ubuntu', 'DejaVu Sans', 'Liberation Sans'],
    outline: 1,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 14,
    name: 'YouTube Gaming',
    description: '–ò–≥—Ä–æ–≤–æ–π —Å—Ç–∏–ª—å YouTube - –∑–µ–ª–µ–Ω—ã–π –≥–µ–π–º–µ—Ä—Å–∫–∏–π'
  },
  
  // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å—Ç–∏–ª–∏
  modern_gradient: {
    fontsize: 9,  // 17/2 ‚âà 9
    fontcolor: 'ff69b4',
    fontname: 'Open Sans',
    fontnames: ['Montserrat', 'Open Sans', 'Liberation Sans'],
    outline: 2,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 15,
    name: 'Modern Pink',
    description: '–ú–æ–¥–µ—Ä–Ω —Ä–æ–∑–æ–≤—ã–π - —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Ü–≤–µ—Ç 2024'
  },
  
  retro_vhs: {
    fontsize: 8,  // 16/2 = 8
    fontcolor: 'ff00ff',
    fontname: 'DejaVu Sans',
    fontnames: ['Ubuntu', 'DejaVu Sans', 'Liberation Sans'],
    outline: 1,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 14,
    name: 'Retro VHS',
    description: '–†–µ—Ç—Ä–æ VHS —Å—Ç–∏–ª—å - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –≤–∏–Ω—Ç–∞–∂'
  },
  
  minimal_black: {
    fontsize: 7,  // 13/2 ‚âà 7
    fontcolor: '000000',
    fontname: 'Noto Sans',
    fontnames: ['Roboto', 'Noto Sans', 'Liberation Sans'],
    outline: 0,
    shadow: 0,
    alignment: 2,
    marginv: 10,
    backcolour: '&H80ffffff',
    name: 'Minimal Black',
    description: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π - —á–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ'
  },
  
  // –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–ª–∏
  luxury_gold: {
    fontsize: 9,  // 18/2 = 9
    fontcolor: 'ffd700',
    fontname: 'DejaVu Sans',
    fontnames: ['Ubuntu', 'DejaVu Sans', 'Liberation Sans'],
    outline: 2,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 16,
    backcolour: '&H80000000',
    name: 'Luxury Gold',
    description: '–ü—Ä–µ–º–∏—É–º –∑–æ–ª–æ—Ç–æ–π - —Ä–æ—Å–∫–æ—à–Ω—ã–π —Å—Ç–∏–ª—å'
  },
  
  neon_purple: {
    fontsize: 9,  // 17/2 ‚âà 9
    fontcolor: '9400d3',
    fontname: 'Liberation Sans',
    fontnames: ['Open Sans', 'Liberation Sans', 'Noto Sans'],
    outline: 2,
    shadow: 1,
    bold: 1,
    alignment: 2,
    marginv: 15,
    name: 'Neon Purple',
    description: '–ù–µ–æ–Ω–æ–≤—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π - –∫–∏–±–µ—Ä–ø–∞–Ω–∫ —Å—Ç–∏–ª—å'
  }
};

// üìç –ü–û–ó–ò–¶–ò–ò –°–£–ë–¢–ò–¢–†–û–í
const SUBTITLE_POSITIONS = {
  bottom: {
    alignment: 2,     // –ü–æ —Ü–µ–Ω—Ç—Ä—É
    marginv: 15,      // –û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
    name: '–°–Ω–∏–∑—É',
    description: '–°—É–±—Ç–∏—Ç—Ä—ã –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)'
  },
  top: {
    alignment: 8,     // –ü–æ —Ü–µ–Ω—Ç—Ä—É –≤–≤–µ—Ä—Ö—É  
    marginv: 15,      // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
    name: '–°–≤–µ—Ä—Ö—É',
    description: '–°—É–±—Ç–∏—Ç—Ä—ã –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞'
  },
  center: {
    alignment: 5,     // –ü–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
    marginv: 0,       // –ë–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤
    name: '–ü–æ —Ü–µ–Ω—Ç—Ä—É',
    description: '–°—É–±—Ç–∏—Ç—Ä—ã –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞'
  }
};

// üéØ –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ö–ê–ß–ï–°–¢–í–ê –ò–°–•–û–î–ù–û–ì–û –í–ò–î–ï–û
function analyzeVideoQuality(inputPath) {
  try {
    const probe = execSync(`ffprobe -v quiet -print_format json -show_streams "${inputPath}"`, { encoding: 'utf8' });
    const info = JSON.parse(probe);
    const videoStream = info.streams.find(s => s.codec_type === 'video');
    
    const bitrate = parseInt(videoStream.bit_rate) || 0;
    const width = parseInt(videoStream.width);
    const height = parseInt(videoStream.height);
    const codec = videoStream.codec_name;
    const fps = eval(videoStream.r_frame_rate) || 30;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    let qualityLevel = 'medium';
    if (bitrate > 8000000 || width >= 1920) qualityLevel = 'high';
    if (bitrate > 15000000 || width >= 3840) qualityLevel = 'ultra';
    if (bitrate < 2000000 && width < 1280) qualityLevel = 'low';
    
    return {
      bitrate,
      width,
      height,
      codec,
      fps,
      qualityLevel,
      resolution: `${width}x${height}`,
      isHighRes: width >= 1920 || height >= 1080
    };
  } catch (error) {
    console.warn('Failed to analyze video quality:', error.message);
    return {
      bitrate: 0,
      width: 1920,
      height: 1080,
      codec: 'unknown',
      fps: 30,
      qualityLevel: 'medium',
      resolution: '1920x1080',
      isHighRes: true
    };
  }
}

// üéØ –í–´–ë–û–† –û–ü–¢–ò–ú–ê–õ–¨–ù–´–• –ù–ê–°–¢–†–û–ï–ö –ù–ê –û–°–ù–û–í–ï force_quality
function getQualitySettings(forceQuality, videoQuality) {
  console.log(`[DEBUG] getQualitySettings called with: ${forceQuality}`);
  
  let settings;
  
  switch(forceQuality) {
    case 'lossless':
      settings = {
        crf: 0,              // –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –ø–æ—Ç–µ—Ä—å
        preset: 'slow',      // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ = –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        tune: 'film',
        profile: 'high',
        level: '5.1',
        description: 'LOSSLESS_PERFECT_QUALITY'
      };
      break;
      
    case 'ultra':
      settings = {
        crf: 8,              // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        preset: 'slow',
        tune: 'film',
        profile: 'high',
        level: '5.1',
        description: 'ULTRA_HIGH_QUALITY'
      };
      break;
      
    case 'high':
      settings = {
        crf: 12,             // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        preset: 'medium',
        tune: 'film',
        profile: 'high',
        level: '4.1',
        description: 'HIGH_QUALITY'
      };
      break;
      
    case 'medium':
      settings = {
        crf: 18,             // –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        preset: 'medium',
        tune: null,
        profile: 'main',
        level: '4.0',
        description: 'MEDIUM_QUALITY'
      };
      break;
      
    case 'low':
      settings = {
        crf: 28,             // –ó–∞–º–µ—Ç–Ω–æ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        preset: 'fast',
        tune: null,
        profile: 'baseline',
        level: '3.1',
        description: 'LOW_QUALITY_FAST'
      };
      break;
      
    case 'auto':
    default:
      // –ê–≤—Ç–æ –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
      if (videoQuality.qualityLevel === 'ultra') {
        settings = { crf: 12, preset: 'slow', tune: 'film', profile: 'high', level: '5.1', description: 'AUTO_ULTRA' };
      } else if (videoQuality.qualityLevel === 'high') {
        settings = { crf: 15, preset: 'medium', tune: 'film', profile: 'high', level: '4.1', description: 'AUTO_HIGH' };
      } else if (videoQuality.qualityLevel === 'low') {
        settings = { crf: 20, preset: 'fast', tune: null, profile: 'main', level: '3.1', description: 'AUTO_LOW' };
      } else {
        settings = { crf: 18, preset: 'medium', tune: null, profile: 'main', level: '4.0', description: 'AUTO_MEDIUM' };
      }
      break;
  }
  
  console.log(`[DEBUG] Selected settings:`, settings);
  return settings;
}

// Health check
app.get('/health', (req, res) => {
  const systemInfo = getSystemInfo();
  
  res.json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    mode: 'MAXIMUM_QUALITY_SOCIAL_MEDIA_STYLES_WITH_STREAMING',
    total_styles: Object.keys(SUBTITLE_STYLES).length,
    quality_mode: 'NO_COMPRESSION_MAXIMUM_QUALITY_STREAMING_ENABLED',
    endpoints: [
      '/process-video-stream (JSON response - NO TIMEOUT)',
      '/health (This endpoint)'
    ],
    ...systemInfo
  });
});

function getSystemInfo() {
  try {
    const ffmpegVersion = execSync('ffmpeg -version', { encoding: 'utf8' }).split('\n')[0];
    
    let availableFonts = [];
    try {
      const fontList = execSync('fc-list', { encoding: 'utf8' });
      availableFonts = fontList.split('\n').slice(0, 5);
    } catch (err) {
      availableFonts = ['Font check failed'];
    }
    
    return {
      ffmpeg_available: true,
      ffmpeg_version: ffmpegVersion,
      fonts_available: availableFonts,
      subtitle_method: 'MAXIMUM_QUALITY_SOCIAL_MEDIA_STYLES_WITH_JSON_RESPONSE'
    };
  } catch (error) {
    return { 
      ffmpeg_available: false, 
      error: error.message 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SRT
function beautifySRT(srtContent, taskId) {
  console.log(`[${taskId}] Beautifying SRT text...`);
  console.log(`[${taskId}] Original SRT length: ${srtContent.length} chars`);
  
  if (!srtContent || srtContent.length < 10) {
    throw new Error('SRT content is empty or too short');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SRT —Ñ–æ—Ä–º–∞—Ç
  if (!srtContent.includes('-->')) {
    console.log(`[${taskId}] ‚ö†Ô∏è Invalid SRT format - converting plain text to SRT`);
    return `1\n00:00:00,000 --> 00:00:10,000\n${srtContent.trim()}\n\n`;
  }
  
  // –û—á–∏—â–∞–µ–º SRT
  let beautifiedSrt = srtContent
    .replace(/\r\n/g, '\n')  // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\r/g, '\n')
    .trim();
  
  // –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
  const lines = beautifiedSrt.split('\n');
  const improvedLines = [];
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    
    if (line.includes('-->')) {
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      improvedLines.push(line);
    } else if (/^\d+$/.test(line)) {
      // –ù–æ–º–µ—Ä–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      improvedLines.push(line);
    } else if (line.length > 0) {
      // –£–ª—É—á—à–∞–µ–º —Ç–µ–∫—Å—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
      let improvedText = line;
      
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      improvedText = improvedText.replace(/\s+/g, ' ').trim();
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
      improvedText = improvedText.replace(/\s+([,.!?;:])/g, '$1');
      improvedText = improvedText.replace(/([,.!?;:])\s*/g, '$1 ');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      improvedText = improvedText.replace(/"/g, '¬´').replace(/"/g, '¬ª');
      
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
      if (improvedText.length > 50) {
        const words = improvedText.split(' ');
        if (words.length > 8) {
          const mid = Math.ceil(words.length / 2);
          // –ò—â–µ–º —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, —Ç–æ—á–∫–∏ –∏ —Ç.–¥.)
          let splitPoint = mid;
          for (let j = mid - 2; j <= mid + 2 && j < words.length; j++) {
            if (j > 0 && (words[j-1].endsWith(',') || words[j-1].endsWith('.') || words[j-1].endsWith('!'))) {
              splitPoint = j;
              break;
            }
          }
          const firstLine = words.slice(0, splitPoint).join(' ');
          const secondLine = words.slice(splitPoint).join(' ');
          improvedText = firstLine + '\n' + secondLine;
        }
      }
      
      improvedLines.push(improvedText);
    } else {
      // –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      improvedLines.push('');
    }
  }
  
  beautifiedSrt = improvedLines.join('\n');
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ SRT –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
  if (!beautifiedSrt.endsWith('\n\n')) {
    beautifiedSrt += '\n\n';
  }
  
  console.log(`[${taskId}] ‚úÖ SRT beautification complete`);
  console.log(`[${taskId}] Beautified length: ${beautifiedSrt.length} chars`);
  console.log(`[${taskId}] Preview:`, beautifiedSrt.substring(0, 300));
  
  return beautifiedSrt;
}

// üöÄ –û–°–ù–û–í–ù–û–ô STREAMING ENDPOINT –° VALIDATED BASE64 RESPONSE
app.post('/process-video-stream', upload.single('video'), async (req, res) => {
  const taskId = req.body.task_id || uuidv4();
  const startTime = Date.now();
  
  console.log(`\n=== [${taskId}] STREAMING QUALITY PROCESSING (VALIDATED JSON) ===`);

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'Video file is required',
        task_id: taskId
      });
    }

    if (!req.body.srt_content) {
      return res.status(400).json({
        success: false,
        error: 'SRT content is required',
        task_id: taskId
      });
    }

    const videoBuffer = req.file.buffer;
    const rawSrtContent = req.body.srt_content;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const styleId = req.body.style_id || 'tiktok_classic';
    const position = req.body.position || 'bottom';
    const customStyle = req.body.custom_style ? JSON.parse(req.body.custom_style) : null;
    const forceQuality = req.body.force_quality || 'auto';
    
    console.log(`[${taskId}] Video size: ${(videoBuffer.length / 1024 / 1024).toFixed(2)}MB`);
    console.log(`[${taskId}] Raw SRT length: ${rawSrtContent.length} chars`);
    console.log(`[${taskId}] Style: ${styleId}, Position: ${position}`);
    console.log(`[${taskId}] üéØ Quality mode: ${forceQuality}`);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å
    let selectedStyle;
    if (customStyle) {
      selectedStyle = customStyle;
      console.log(`[${taskId}] Using CUSTOM style`);
    } else if (SUBTITLE_STYLES[styleId]) {
      selectedStyle = SUBTITLE_STYLES[styleId];
      console.log(`[${taskId}] Using predefined style: ${selectedStyle.name}`);
    } else {
      selectedStyle = SUBTITLE_STYLES.tiktok_classic;
      console.log(`[${taskId}] Using default style: ${selectedStyle.name}`);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    if (SUBTITLE_POSITIONS[position]) {
      const positionSettings = SUBTITLE_POSITIONS[position];
      selectedStyle.alignment = positionSettings.alignment;
      selectedStyle.marginv = positionSettings.marginv;
      console.log(`[${taskId}] üìç Applied position: ${positionSettings.name}`);
    }

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const tempDir = '/tmp/processing';
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    const inputVideoPath = path.join(tempDir, `stream_input_${taskId}.mp4`);
    const srtPath = path.join(tempDir, `stream_subtitles_${taskId}.srt`);
    const outputVideoPath = path.join(tempDir, `stream_output_${taskId}.mp4`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    fs.writeFileSync(inputVideoPath, videoBuffer);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    console.log(`[${taskId}] üîç Analyzing video quality...`);
    const videoQuality = analyzeVideoQuality(inputVideoPath);
    console.log(`[${taskId}] üìä Analysis:`, {
      resolution: videoQuality.resolution,
      bitrate: Math.round(videoQuality.bitrate / 1000) + 'kbps',
      qualityLevel: videoQuality.qualityLevel
    });

    // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    const optimalSettings = getQualitySettings(forceQuality, videoQuality);
    console.log(`[${taskId}] ‚öôÔ∏è Quality settings:`, optimalSettings);

    // Beautify SRT
    const beautifiedSRT = beautifySRT(rawSrtContent, taskId);
    fs.writeFileSync(srtPath, beautifiedSRT, 'utf8');

    // –°—Ç—Ä–æ–∏–º style string
    const buildStyleString = (style) => {
      let styleStr = `Fontsize=${style.fontsize}`;
      if (style.fontname) styleStr += `,Fontname=${style.fontname}`;
      if (style.fontcolor) {
        const color = style.fontcolor.startsWith('&H') ? style.fontcolor : `&H${style.fontcolor}`;
        styleStr += `,PrimaryColour=${color}`;
      }
      if (style.outline) styleStr += `,OutlineColour=&H000000,Outline=${style.outline}`;
      if (style.shadow) styleStr += `,Shadow=${style.shadow}`;
      if (style.bold) styleStr += `,Bold=${style.bold}`;
      if (style.alignment) styleStr += `,Alignment=${style.alignment}`;
      if (style.marginv) styleStr += `,MarginV=${style.marginv}`;
      if (style.backcolour) styleStr += `,BackColour=${style.backcolour}`;
      return styleStr;
    };

    const styleString = buildStyleString(selectedStyle);
    console.log(`[${taskId}] Style string: ${styleString}`);

    // –°—Ç—Ä–æ–∏–º FFmpeg –∫–æ–º–∞–Ω–¥—É
    const mainCommand = `ffmpeg -i "${inputVideoPath}" -vf "subtitles='${srtPath}':force_style='${styleString}'" -c:a copy -c:v libx264 -preset ${optimalSettings.preset} -crf ${optimalSettings.crf} -pix_fmt yuv420p${optimalSettings.tune ? ` -tune ${optimalSettings.tune}` : ''} -profile:v ${optimalSettings.profile}${optimalSettings.level ? ` -level ${optimalSettings.level}` : ''} -movflags +faststart -y "${outputVideoPath}"`;

    const commands = [
      mainCommand,
      `ffmpeg -i "${inputVideoPath}" -vf "subtitles='${srtPath}':force_style='${styleString}'" -c:a copy -c:v libx264 -preset medium -crf 18 -pix_fmt yuv420p -movflags +faststart -y "${outputVideoPath}"`,
      `ffmpeg -i "${inputVideoPath}" -vf "subtitles='${srtPath}':force_style='${styleString}'" -c:a copy -c:v libx264 -preset medium -crf 20 -pix_fmt yuv420p -y "${outputVideoPath}"`,
      `ffmpeg -i "${inputVideoPath}" -vf "subtitles='${srtPath}'" -c:a copy -c:v libx264 -preset fast -crf 23 -pix_fmt yuv420p -y "${outputVideoPath}"`
    ];

    let success = false;
    let usedCommand = 0;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û
    for (let i = 0; i < commands.length && !success; i++) {
      try {
        console.log(`[${taskId}] üé® Trying streaming method ${i + 1}...`);
        
        if (fs.existsSync(outputVideoPath)) fs.unlinkSync(outputVideoPath);
        
        const cmdStartTime = Date.now();
        execSync(commands[i], { 
          stdio: 'pipe',
          timeout: 600000,
          maxBuffer: 1024 * 1024 * 200
        });
        const cmdDuration = Date.now() - cmdStartTime;
        
        if (fs.existsSync(outputVideoPath)) {
          const outputSize = fs.statSync(outputVideoPath).size;
          if (outputSize > 0) {
            console.log(`[${taskId}] ‚úÖ STREAMING SUCCESS! Method ${i + 1} worked! (${cmdDuration}ms)`);
            console.log(`[${taskId}] Output size: ${(outputSize / 1024 / 1024).toFixed(2)}MB`);
            success = true;
            usedCommand = i + 1;
            break;
          }
        }
      } catch (error) {
        console.log(`[${taskId}] ‚ùå Streaming method ${i + 1} failed:`, error.message);
      }
    }

    if (!success) {
      throw new Error('All streaming methods failed');
    }

    // –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –°–û–ó–î–ê–ù–ò–ï –û–¢–í–ï–¢–ê
    console.log(`[${taskId}] üéâ STREAMING PROCESSING SUCCESS! üöÄ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    if (!fs.existsSync(outputVideoPath)) {
      throw new Error('Output video file not found');
    }

    const outputStats = fs.statSync(outputVideoPath);
    if (outputStats.size === 0) {
      throw new Error('Output video file is empty');
    }

    console.log(`[${taskId}] üìπ Video file validated: ${outputStats.size} bytes`);

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ binary buffer
    const processedVideoBuffer = fs.readFileSync(outputVideoPath);
    console.log(`[${taskId}] üìñ File read successfully: ${processedVideoBuffer.length} bytes`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º MP4 header
    const mp4Header = processedVideoBuffer.slice(0, 12);
    const isValidMP4 = mp4Header.includes(Buffer.from('ftyp')) || 
                       mp4Header.slice(4, 8).toString() === 'ftyp';
    
    if (!isValidMP4) {
      console.warn(`[${taskId}] ‚ö†Ô∏è Warning: File may not be valid MP4`);
    } else {
      console.log(`[${taskId}] ‚úÖ Valid MP4 header detected`);
    }

    // –°–æ–∑–¥–∞–µ–º Base64 —Å explicit encoding
    const base64Data = processedVideoBuffer.toString('base64');
    console.log(`[${taskId}] üî¢ Base64 created: ${base64Data.length} chars`);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º Base64
    const base64Regex = /^[A-Za-z0-9+/]*={0,2}$/;
    if (!base64Regex.test(base64Data)) {
      throw new Error('Invalid Base64 data generated');
    }

    console.log(`[${taskId}] ‚úÖ Base64 validation passed`);

    const processingTime = Date.now() - startTime;
    const sizeChange = ((processedVideoBuffer.length / videoBuffer.length) - 1) * 100;

    console.log(`[${taskId}] Processing time: ${processingTime}ms`);
    console.log(`[${taskId}] Size change: ${sizeChange > 0 ? '+' : ''}${sizeChange.toFixed(1)}%`);
    console.log(`[${taskId}] Quality mode: ${optimalSettings.description}`);
    console.log(`[${taskId}] üöÄ Sending validated JSON response...`);

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    [inputVideoPath, srtPath, outputVideoPath].forEach(filePath => {
      try {
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`[${taskId}] üóëÔ∏è Deleted: ${path.basename(filePath)}`);
        }
      } catch (err) {
        console.warn(`[${taskId}] Failed to delete: ${filePath}`);
      }
    });

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const responseData = {
      success: true,
      task_id: taskId,
      processing_stats: {
        processing_time_ms: processingTime,
        input_size_bytes: videoBuffer.length,
        output_size_bytes: processedVideoBuffer.length,
        size_change_percent: parseFloat(sizeChange.toFixed(1)),
        method_used: `STREAMING_METHOD_${usedCommand}`,
        quality_mode: forceQuality,
        quality_description: optimalSettings.description
      },
      video_data: base64Data,
      content_type: 'video/mp4',
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      video_metadata: {
        original_size_bytes: processedVideoBuffer.length,
        base64_length: base64Data.length,
        expected_decoded_size: Math.ceil(base64Data.length * 3 / 4), // Base64 overhead
        file_signature: processedVideoBuffer.slice(0, 12).toString('hex'), // MP4 magic bytes
        is_valid_mp4: isValidMP4,
        content_type: 'video/mp4',
        encoding: 'base64'
      },
      style_info: {
        style_id: customStyle ? 'custom' : styleId,
        style_name_safe: customStyle ? 'Custom_Style' : styleId.replace(/_/g, '-'),
        position: position,
        fontsize: selectedStyle.fontsize,
        fontcolor: selectedStyle.fontcolor,
        has_background: !!selectedStyle.backcolour,
        has_bold: !!selectedStyle.bold
      },
      quality_info: {
        input_resolution: videoQuality.resolution,
        input_bitrate: videoQuality.bitrate,
        input_quality_level: videoQuality.qualityLevel,
        force_quality: forceQuality,
        crf_used: optimalSettings.crf,
        preset_used: optimalSettings.preset,
        profile_used: optimalSettings.profile
      }
    };

    console.log(`[${taskId}] üì§ Sending JSON response with validated video data...`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    res.json(responseData);

  } catch (error) {
    console.error(`[${taskId}] üí• STREAMING ERROR:`, error.message);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const tempFiles = [
      `/tmp/processing/stream_input_${taskId}.mp4`,
      `/tmp/processing/stream_subtitles_${taskId}.srt`,
      `/tmp/processing/stream_output_${taskId}.mp4`
    ];
    
    tempFiles.forEach(filePath => {
      try {
        if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
      } catch (err) {}
    });

    res.status(500).json({
      success: false,
      task_id: taskId,
      error: error.message,
      processing_time_ms: Date.now() - startTime
    });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
const server = app.listen(PORT, () => {
  console.log(`üé® MAXIMUM QUALITY SOCIAL MEDIA Subtitle Service running on port ${PORT} üé®`);
  console.log(`üì± Ready for TikTok, Instagram, YouTube styles with CRYSTAL CLEAR quality!`);
  console.log(`üé¨ Total available styles: ${Object.keys(SUBTITLE_STYLES).length}`);
  console.log(`üéØ Quality modes available:`);
  console.log(`   ‚Ä¢ auto - Adaptive quality based on input analysis`);
  console.log(`   ‚Ä¢ lossless - Perfect quality preservation (CRF 0)`);
  console.log(`   ‚Ä¢ ultra - Ultra high quality (CRF 8)`);
  console.log(`   ‚Ä¢ high - High quality (CRF 12)`);
  console.log(`   ‚Ä¢ medium - Medium quality (CRF 18)`);
  console.log(`   ‚Ä¢ low - Low quality for testing (CRF 28)`);
  console.log(`üöÄ Endpoints available:`);
  console.log(`   ‚Ä¢ POST /process-video-stream (Main endpoint - Validated JSON)`);
  console.log(`   ‚Ä¢ GET /health (System status)`);
  const systemInfo = getSystemInfo();
  console.log(`FFmpeg: ${systemInfo.ffmpeg_available}`);
  console.log(`Quality Mode: VALIDATED_JSON_RESPONSE_WITH_MP4_VERIFICATION`);
});

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout —Å–µ—Ä–≤–µ—Ä–∞
server.timeout = 900000; // 15 –º–∏–Ω—É—Ç
server.keepAliveTimeout = 900000;
server.headersTimeout = 900000;
