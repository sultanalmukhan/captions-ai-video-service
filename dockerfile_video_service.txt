# Multi-stage build для оптимизации размера
FROM node:18-alpine as builder

# Устанавливаем зависимости для сборки
RUN apk add --no-cache python3 make g++

WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

# Production stage
FROM node:18-alpine

# Устанавливаем FFmpeg и необходимые runtime зависимости
RUN apk add --no-cache \
    ffmpeg \
    && rm -rf /var/cache/apk/*

# Создаем пользователя для безопасности
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Создаем рабочий каталог
WORKDIR /app

# Копируем зависимости из builder stage
COPY --from=builder /app/node_modules ./node_modules

# Копируем исходный код
COPY --chown=nodejs:nodejs . .

# Создаем необходимые директории
RUN mkdir -p /tmp/uploads && \
    chown -R nodejs:nodejs /tmp/uploads

# Переключаемся на непривилегированного пользователя
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:${PORT:-3000}/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Открываем порт
EXPOSE 3000

# Запускаем сервис
CMD ["node", "server.js"]